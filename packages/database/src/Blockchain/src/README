# Step to generate code for EVMweb

In this document I explain the steps to produce the code
which can be implemented inside the EVMweb class starting
from the `.sol` file to the actual implementation.

In this example we will use a simple solidity code, which
can be found in `Blockchain/contracts/zion_contracts`.

## Compilation

First we need to compile the code by running
`npx hardhat compile` in the console.
Delete the not used `PromiseOrValue` in each newly compiled
file cause typescript will complain about it.

## Create a folder with the name of the contract

Simply copy and paste the folder relative to the contract
which Hardhat compile and placed in the `artifact` folder.

## Creating a getSimpleStorage_factory function

This function creates an instance of a
`ethers.ContractFactory` class.

```ts
export const getMyContract = (
  signer: Signer
): MyContract__factory =>
  new ethers.ContractFactory(
    contract.abi,
    contract.bytecode,
    signer
  ) as MyContract__factory;
```

or use the `getfact` snippet.

## Add export to index file

Next step is to add the correct exports to the `index.ts`
file which is in the

## Load the factory

Once the package is ready it can be imported in the file `EVM/Types/ZionContractFactories.ts` file.

## Build the package

run `yarn build`Â in the console.
