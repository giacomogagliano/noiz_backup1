/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface APrivatezERC1155MasterTokenShopInterface
  extends utils.Interface {
  functions: {};

  events: {
    "Dividend(uint256)": EventFragment;
    "SnapshotTokenSet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dividend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SnapshotTokenSet"): EventFragment;
}

export interface DividendEventObject {
  id: BigNumber;
}
export type DividendEvent = TypedEvent<[BigNumber], DividendEventObject>;

export type DividendEventFilter = TypedEventFilter<DividendEvent>;

export interface SnapshotTokenSetEventObject {
  ierc1155master: string;
  idUsedAsShares: BigNumber;
}
export type SnapshotTokenSetEvent = TypedEvent<
  [string, BigNumber],
  SnapshotTokenSetEventObject
>;

export type SnapshotTokenSetEventFilter =
  TypedEventFilter<SnapshotTokenSetEvent>;

export interface APrivatezERC1155MasterTokenShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: APrivatezERC1155MasterTokenShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Dividend(uint256)"(id?: null): DividendEventFilter;
    Dividend(id?: null): DividendEventFilter;

    "SnapshotTokenSet(address,uint256)"(
      ierc1155master?: null,
      idUsedAsShares?: null
    ): SnapshotTokenSetEventFilter;
    SnapshotTokenSet(
      ierc1155master?: null,
      idUsedAsShares?: null
    ): SnapshotTokenSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
