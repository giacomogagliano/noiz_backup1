/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface APrivatezERC1155TokenShopInterface extends utils.Interface {
  functions: {};

  events: {
    "CapitalWithdrawal(address,uint256)": EventFragment;
    "PriceChanged(address,uint256)": EventFragment;
    "ShopCreated(address,address,address,address,address,uint256)": EventFragment;
    "Sold(address,uint256,uint256)": EventFragment;
    "TokenOnSaleWithdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapitalWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShopCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOnSaleWithdrawal"): EventFragment;
}

export interface CapitalWithdrawalEventObject {
  submitter: string;
  amount: BigNumber;
}
export type CapitalWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  CapitalWithdrawalEventObject
>;

export type CapitalWithdrawalEventFilter =
  TypedEventFilter<CapitalWithdrawalEvent>;

export interface PriceChangedEventObject {
  submitter: string;
  newPrice: BigNumber;
}
export type PriceChangedEvent = TypedEvent<
  [string, BigNumber],
  PriceChangedEventObject
>;

export type PriceChangedEventFilter = TypedEventFilter<PriceChangedEvent>;

export interface ShopCreatedEventObject {
  shopAddress: string;
  owner: string;
  membership: string;
  tokenContract: string;
  tokenUsedForPayement: string;
  price: BigNumber;
}
export type ShopCreatedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  ShopCreatedEventObject
>;

export type ShopCreatedEventFilter = TypedEventFilter<ShopCreatedEvent>;

export interface SoldEventObject {
  buyer: string;
  id: BigNumber;
  amount: BigNumber;
}
export type SoldEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SoldEventObject
>;

export type SoldEventFilter = TypedEventFilter<SoldEvent>;

export interface TokenOnSaleWithdrawalEventObject {
  submitter: string;
  amount: BigNumber;
}
export type TokenOnSaleWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  TokenOnSaleWithdrawalEventObject
>;

export type TokenOnSaleWithdrawalEventFilter =
  TypedEventFilter<TokenOnSaleWithdrawalEvent>;

export interface APrivatezERC1155TokenShop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: APrivatezERC1155TokenShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CapitalWithdrawal(address,uint256)"(
      submitter?: null,
      amount?: null
    ): CapitalWithdrawalEventFilter;
    CapitalWithdrawal(
      submitter?: null,
      amount?: null
    ): CapitalWithdrawalEventFilter;

    "PriceChanged(address,uint256)"(
      submitter?: null,
      newPrice?: null
    ): PriceChangedEventFilter;
    PriceChanged(submitter?: null, newPrice?: null): PriceChangedEventFilter;

    "ShopCreated(address,address,address,address,address,uint256)"(
      shopAddress?: null,
      owner?: null,
      membership?: null,
      tokenContract?: null,
      tokenUsedForPayement?: null,
      price?: null
    ): ShopCreatedEventFilter;
    ShopCreated(
      shopAddress?: null,
      owner?: null,
      membership?: null,
      tokenContract?: null,
      tokenUsedForPayement?: null,
      price?: null
    ): ShopCreatedEventFilter;

    "Sold(address,uint256,uint256)"(
      buyer?: null,
      id?: null,
      amount?: null
    ): SoldEventFilter;
    Sold(buyer?: null, id?: null, amount?: null): SoldEventFilter;

    "TokenOnSaleWithdrawal(address,uint256)"(
      submitter?: null,
      amount?: null
    ): TokenOnSaleWithdrawalEventFilter;
    TokenOnSaleWithdrawal(
      submitter?: null,
      amount?: null
    ): TokenOnSaleWithdrawalEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
