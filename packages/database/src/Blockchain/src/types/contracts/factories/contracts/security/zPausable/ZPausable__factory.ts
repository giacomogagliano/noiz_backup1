/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ZPausable,
  ZPausableInterface,
} from "../../../../contracts/security/zPausable/ZPausable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060008060006101000a81548160ff02191690831515021790555060d2806100396000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c975abb14602d575b600080fd5b60336047565b604051603e91906083565b60405180910390f35b6000604f6054565b905090565b60008060009054906101000a900460ff16905090565b60008115159050919050565b607d81606a565b82525050565b6000602082019050609660008301846076565b9291505056fea264697066735822122054f52990accecd6b9d6e24cd63261f852806464887d8c288b692497812ed61a764736f6c63430008090033";

type ZPausableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZPausableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZPausable__factory extends ContractFactory {
  constructor(...args: ZPausableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ZPausable> {
    return super.deploy(overrides || {}) as Promise<ZPausable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ZPausable {
    return super.attach(address) as ZPausable;
  }
  override connect(signer: Signer): ZPausable__factory {
    return super.connect(signer) as ZPausable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZPausableInterface {
    return new utils.Interface(_abi) as ZPausableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ZPausable {
    return new Contract(address, _abi, signerOrProvider) as ZPausable;
  }
}
