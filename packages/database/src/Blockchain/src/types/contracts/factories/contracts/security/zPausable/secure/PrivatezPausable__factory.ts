/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  PrivatezPausable,
  PrivatezPausableInterface,
} from "../../../../../contracts/security/zPausable/secure/PrivatezPausable";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060008060006101000a81548160ff021916908315150217905550603f8060376000396000f3fe6080604052600080fdfea26469706673582212206c9d9695e8e98fee217e7d6c4e56f36e24e1f5536779d17a183349352f0ab75364736f6c63430008090033";

type PrivatezPausableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivatezPausableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivatezPausable__factory extends ContractFactory {
  constructor(...args: PrivatezPausableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PrivatezPausable> {
    return super.deploy(overrides || {}) as Promise<PrivatezPausable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PrivatezPausable {
    return super.attach(address) as PrivatezPausable;
  }
  override connect(signer: Signer): PrivatezPausable__factory {
    return super.connect(signer) as PrivatezPausable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivatezPausableInterface {
    return new utils.Interface(_abi) as PrivatezPausableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivatezPausable {
    return new Contract(address, _abi, signerOrProvider) as PrivatezPausable;
  }
}
